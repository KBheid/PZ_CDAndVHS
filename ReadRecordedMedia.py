# Chop the first few lines of the file, one is blank and one indicates the autogenerated nature of the file
linesToIgnore = 2

replacements = {
	"[img=music]": 'â™«'
}

typeValues = {
	"CD": ['Title', 'Album', 'Production'],
	"VHS": ['Title'],
	"Home VHS": ['Title']
}

lookingFor = list(typeValues.keys())
lookingFor = [x + ':' for x in lookingFor]

def readFile():
	print("Enter file location: >")
	fileLocation = input()
	
	try:
		openFile = open(fileLocation, "r")
	except OSError:
		print('Invalid file location:', fileLocation)
		readFile()
		return
	
	fileLines = openFile.readlines()
	fileLines = fileLines[linesToIgnore:]
	
	# Chop everything before the = and strip the quotes away.
	choppedLines = [chopLine(x) for x in fileLines]
	
	done = False
	currentLine = 0
	
	while not done:
		done, currentLine = readNextMedia(choppedLines, currentLine)
	
	openFile.close()
	
	
def readNextMedia(lines, current):
	done = False
	
	# Get all type specific data:
	mediaType = lines[current].split(':')[0].strip()
	neededValues = typeValues[mediaType]
	values = {}
	mediaContent = []
	
	# Consume media type
	current += 1
	
	for neededValue in neededValues:
		values[neededValue] = lines[current]
		current += 1
	
	
	# Move until we reach a line that indicates a new entry or the end
	while not lines[current].startswith(tuple(lookingFor)) and not done:
		mediaContent.append(lines[current])
		
		current += 1
		if current >= len(lines):
			done = True
			break
		
	print(mediaType)
	for key, value in values.items():
		print(key, "=>", value)
		
	for i in mediaContent:
		print(i)
	
	return done, current


def chopLine(line):
	for key, value in replacements.items():
		line = line.replace(key, value)

	retVal = line.split('=')[1]
	retVal = retVal.strip()
	retVal = retVal[1:-1]
	
	return retVal
	

readFile()