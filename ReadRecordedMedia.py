# Chop the first few lines of the file, one is blank and one indicates the autogenerated nature of the file
linesToIgnore = 2

# Items in a content line that should be replaced
replacements = {
	"[img=music]": 'â™«'
}
mediaTypes = [
	"CDs",
	"VHS",
	"Home-VHS",
	"Retail-VHS"
]
valueNames = [
	('title', True),
	('extra', True),
	('author', True),
	('subtitle', True),
	('itemDisplayName', False),
	('spawning', False),
	('category', False)
]
codes = {
	'BOR': None,
	'REL': 'Reloading %s',
	'AIM': 'Aiming %s',
	'FRM': 'Farming %s',
	'SBA': 'Short Blade %s',
	'BUA': 'Long Blunt %s',
	'MTL': 'Metalworking %s',
	'MEC': 'Mechanical %s',
	'COO': 'Cooking %s',
	'CRP': 'Carpentry %s',
	'FIS': 'Fishing %s',
	'FOR': 'Foraging %s',
	'TRA': 'Trapping %s',
	'TAI': 'Tailoring %s',
	'ELC': 'Electrical %s',
	'DOC': 'First Aid %s',
	'LFT': 'Lightfooted %s',
	'STS': 'Stress {{mood|%s}}',
	'PAN': 'Panic {{mood|%s}}',
	'FAT': 'Fat %s',
	'RCP': 'Recipe %s',
}

import re
import sys
import json
from types import SimpleNamespace

templateFiles = {}
RecMedia = {}
TranslationData = {}
TranslationData[None] = None

def init():	
	global RecMedia

	readTranslationData()
	readTemplateFiles()
	RecMedia = readLuaData("intermediate.out")
	

def readTemplateFiles():
	global templateFiles

	# Try to open all of our wikiformat files, if they don't exist, throw an error
	try: 
		for type in mediaTypes:
			f = open('Templates/' + type.replace(' ', '_') + '.wikiformat')
			templateFiles[type] = f.read()
			f.close()
		f = open('Templates/contentLine.wikiformat')
		templateFiles['contentLine'] = f.read()
		f.close()
		
	except:
		print("Missing template file. Ensure that a file exists under Templates for each of the following items:", 
			[x.replace(' ', '_') + '.wikiformat' for x in mediaTypes],
			"and 'contentLine.wikiformat'"
		)

def readLuaData(filepath):
	f = open(filepath)
	data = f.read()
	out = json.loads(data, object_hook=lambda d: SimpleNamespace(**d))
	f.close()
	return out

def readTranslationData():
	global TranslationData
	translationDataPath = sys.argv[1] + "/media/lua/shared/Translate/EN/Recorded_Media_EN.txt"

	f = open(translationDataPath)
	lines = f.readlines()
	lines = lines[linesToIgnore:]
	f.close()
	
	for line in lines:
		for toReplace, replacement in replacements.items():
			line = line.replace(toReplace, replacement)
			
		lineSplit = line.split("=")
		key = lineSplit[0].strip()
		value = "=".join(lineSplit[1:])
		TranslationData[key] = value

def writeOutput():
	global RecMedia
	global TranslationData
	
	for key, value in vars(RecMedia).items():
		template = templateFiles[value.category]
		contentLineTemplate = templateFiles['contentLine']
		
		id = key
		foundValues = {}
		
		for valueName, findTranslation in valueNames:
			if findTranslation:
				found = TranslationData[getattr(value, valueName, None)]
				if found is not None:
					found = found.strip().strip('"')
					
				foundValues[valueName] = found
			else:
				foundValues[valueName] = getattr(value, valueName, None)
		
		
		lineStrings = []
		for line in value.lines:
			r = line.r
			g = line.g
			b = line.b
			codes = parseCodes(line.codes)
			text = TranslationData[line.text].strip()[1:-1]
			
			newLine = contentLineTemplate
			newLine = replaceOrAppendDelete(newLine, "%r%", r)
			newLine = replaceOrAppendDelete(newLine, "%g%", g)
			newLine = replaceOrAppendDelete(newLine, "%b%", b)
			newLine = replaceOrAppendDelete(newLine, "%codes%", codes)
			newLine = replaceOrAppendDelete(newLine, "%mediaContentItem%", text)
			
			# Handle %ifis%
			newLine = parseIfIs(newLine, {'r':r, 'g':g, 'b':b, 'codes':codes})
			
			if not "||DELETE||" in newLine:
				lineStrings.append(newLine)
			
		mediaContent = "\n".join(lineStrings)
		
		outputLines = []
		templateLines = template.split("\n")
		for line in templateLines:
			for k, v in foundValues.items():
				line = replaceOrAppendDelete(line, '%'+k+'%', v)
				
			if not "||DELETE||" in line:
				outputLines.append(line)
				
		output = "\n".join(outputLines)
		output = output.replace("%mediaContent%", mediaContent)
		
		output = parseIfIs(output, foundValues)
		
		filename = TranslationData[foundValues['itemDisplayName']] if foundValues['itemDisplayName'] in TranslationData else id
		fileName = filename.strip().strip('"').replace('.', '').replace(' ', '_').replace('?', '').replace('/', '-').replace(':', '')
		
		print("Writing file:","Output/" + fileName + ".wikioutput")
		f = open("Output/" + fileName + ".wikioutput", 'w', encoding="utf-8")
		f.write(output)
		f.close()


def parseIfIs(line, valueDictionary):
	afterIfIs = []

	splitLine = line.split("%ifis%")

	# Keep the left
	afterIfIs.append(splitLine[0])

	for tag_and_content in splitLine[1:]:
		match = re.match(r'\(([^,]+),([^)]+)\)', tag_and_content)

		if match:
			checkExists, replacement = match.groups()

			if (checkExists in valueDictionary and 
				valueDictionary[checkExists] not in (None, "") and 
				valueDictionary[checkExists].strip() != ""):
				# Do replacement
				afterIfIs.append(replacement)

			remaining_line = tag_and_content[match.end():]

			# Recursively parse remaining line
			if "%ifis%" in remaining_line:
				afterIfIs.append(parseIfIs(remaining_line, valueDictionary))
			else:
				afterIfIs.append(remaining_line)
		else:
			# Malformed tag, keep as is
			afterIfIs.append("%ifis%" + tag_and_content)
	return "".join(afterIfIs)

	

def parseCodes(codeLine):
	formattedCodes = []
	capturedCodes = codeLine.split(',')
	for capturedCode in capturedCodes:
		codeName = capturedCode[:3]
		codeValue = capturedCode[3:]
		
		codeFormat = codes[codeName]
		if codeFormat is None:
			continue
		
		codeFormat = codeFormat.replace('%s', codeValue)
		formattedCodes.append(codeFormat)
		
	return ",".join(formattedCodes)
	

def replaceOrAppendDelete(line, valToReplace, replacement):
	if (replacement == None) and ("%if%" in line):
		return line + "||DELETE||"
	
	if replacement == None:
		replacement = '[[ VALUE NOT PRESENT ]]'
	
	replacements = line.count(valToReplace)
	if replacements > 0:
		line = line.replace(valToReplace, str(replacement)).replace("%if%", "", replacements)
	
	return line

init()
writeOutput()